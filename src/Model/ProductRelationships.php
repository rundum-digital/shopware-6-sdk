<?php
/**
 * ProductRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Rundum\Shopware6\Model;

use \ArrayAccess;
use \Rundum\Shopware6\ObjectSerializer;

/**
 * ProductRelationships Class Doc Comment
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'product_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parent' => '\Rundum\Shopware6\Model\ProductRelationshipsParent',
'children' => '\Rundum\Shopware6\Model\ProductRelationshipsChildren',
'delivery_time' => '\Rundum\Shopware6\Model\ProductRelationshipsDeliveryTime',
'tax' => '\Rundum\Shopware6\Model\ProductRelationshipsTax',
'manufacturer' => '\Rundum\Shopware6\Model\ProductRelationshipsManufacturer',
'unit' => '\Rundum\Shopware6\Model\ProductRelationshipsUnit',
'cover' => '\Rundum\Shopware6\Model\ProductRelationshipsCover',
'prices' => '\Rundum\Shopware6\Model\ProductRelationshipsPrices',
'media' => '\Rundum\Shopware6\Model\ProductRelationshipsMedia',
'cross_sellings' => '\Rundum\Shopware6\Model\ProductRelationshipsCrossSellings',
'cross_selling_assigned_products' => '\Rundum\Shopware6\Model\ProductRelationshipsCrossSellingAssignedProducts',
'configurator_settings' => '\Rundum\Shopware6\Model\ProductRelationshipsConfiguratorSettings',
'visibilities' => '\Rundum\Shopware6\Model\ProductRelationshipsVisibilities',
'search_keywords' => '\Rundum\Shopware6\Model\ProductRelationshipsSearchKeywords',
'product_reviews' => '\Rundum\Shopware6\Model\ProductRelationshipsProductReviews',
'main_categories' => '\Rundum\Shopware6\Model\ProductRelationshipsMainCategories',
'seo_urls' => '\Rundum\Shopware6\Model\ProductRelationshipsSeoUrls',
'order_line_items' => '\Rundum\Shopware6\Model\ProductRelationshipsOrderLineItems',
'options' => '\Rundum\Shopware6\Model\ProductRelationshipsOptions',
'properties' => '\Rundum\Shopware6\Model\ProductRelationshipsProperties',
'categories' => '\Rundum\Shopware6\Model\ProductRelationshipsCategories',
'categories_ro' => '\Rundum\Shopware6\Model\ProductRelationshipsCategoriesRo',
'tags' => '\Rundum\Shopware6\Model\ProductRelationshipsTags',
'custom_field_sets' => '\Rundum\Shopware6\Model\ProductRelationshipsCustomFieldSets',
'feature_set' => '\Rundum\Shopware6\Model\ProductRelationshipsFeatureSet',
'wishlists' => '\Rundum\Shopware6\Model\ProductRelationshipsWishlists',
'canonical_product' => '\Rundum\Shopware6\Model\ProductRelationshipsCanonicalProduct'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parent' => null,
'children' => null,
'delivery_time' => null,
'tax' => null,
'manufacturer' => null,
'unit' => null,
'cover' => null,
'prices' => null,
'media' => null,
'cross_sellings' => null,
'cross_selling_assigned_products' => null,
'configurator_settings' => null,
'visibilities' => null,
'search_keywords' => null,
'product_reviews' => null,
'main_categories' => null,
'seo_urls' => null,
'order_line_items' => null,
'options' => null,
'properties' => null,
'categories' => null,
'categories_ro' => null,
'tags' => null,
'custom_field_sets' => null,
'feature_set' => null,
'wishlists' => null,
'canonical_product' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent' => 'parent',
'children' => 'children',
'delivery_time' => 'deliveryTime',
'tax' => 'tax',
'manufacturer' => 'manufacturer',
'unit' => 'unit',
'cover' => 'cover',
'prices' => 'prices',
'media' => 'media',
'cross_sellings' => 'crossSellings',
'cross_selling_assigned_products' => 'crossSellingAssignedProducts',
'configurator_settings' => 'configuratorSettings',
'visibilities' => 'visibilities',
'search_keywords' => 'searchKeywords',
'product_reviews' => 'productReviews',
'main_categories' => 'mainCategories',
'seo_urls' => 'seoUrls',
'order_line_items' => 'orderLineItems',
'options' => 'options',
'properties' => 'properties',
'categories' => 'categories',
'categories_ro' => 'categoriesRo',
'tags' => 'tags',
'custom_field_sets' => 'customFieldSets',
'feature_set' => 'featureSet',
'wishlists' => 'wishlists',
'canonical_product' => 'canonicalProduct'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent' => 'setParent',
'children' => 'setChildren',
'delivery_time' => 'setDeliveryTime',
'tax' => 'setTax',
'manufacturer' => 'setManufacturer',
'unit' => 'setUnit',
'cover' => 'setCover',
'prices' => 'setPrices',
'media' => 'setMedia',
'cross_sellings' => 'setCrossSellings',
'cross_selling_assigned_products' => 'setCrossSellingAssignedProducts',
'configurator_settings' => 'setConfiguratorSettings',
'visibilities' => 'setVisibilities',
'search_keywords' => 'setSearchKeywords',
'product_reviews' => 'setProductReviews',
'main_categories' => 'setMainCategories',
'seo_urls' => 'setSeoUrls',
'order_line_items' => 'setOrderLineItems',
'options' => 'setOptions',
'properties' => 'setProperties',
'categories' => 'setCategories',
'categories_ro' => 'setCategoriesRo',
'tags' => 'setTags',
'custom_field_sets' => 'setCustomFieldSets',
'feature_set' => 'setFeatureSet',
'wishlists' => 'setWishlists',
'canonical_product' => 'setCanonicalProduct'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent' => 'getParent',
'children' => 'getChildren',
'delivery_time' => 'getDeliveryTime',
'tax' => 'getTax',
'manufacturer' => 'getManufacturer',
'unit' => 'getUnit',
'cover' => 'getCover',
'prices' => 'getPrices',
'media' => 'getMedia',
'cross_sellings' => 'getCrossSellings',
'cross_selling_assigned_products' => 'getCrossSellingAssignedProducts',
'configurator_settings' => 'getConfiguratorSettings',
'visibilities' => 'getVisibilities',
'search_keywords' => 'getSearchKeywords',
'product_reviews' => 'getProductReviews',
'main_categories' => 'getMainCategories',
'seo_urls' => 'getSeoUrls',
'order_line_items' => 'getOrderLineItems',
'options' => 'getOptions',
'properties' => 'getProperties',
'categories' => 'getCategories',
'categories_ro' => 'getCategoriesRo',
'tags' => 'getTags',
'custom_field_sets' => 'getCustomFieldSets',
'feature_set' => 'getFeatureSet',
'wishlists' => 'getWishlists',
'canonical_product' => 'getCanonicalProduct'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['delivery_time'] = isset($data['delivery_time']) ? $data['delivery_time'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['cover'] = isset($data['cover']) ? $data['cover'] : null;
        $this->container['prices'] = isset($data['prices']) ? $data['prices'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['cross_sellings'] = isset($data['cross_sellings']) ? $data['cross_sellings'] : null;
        $this->container['cross_selling_assigned_products'] = isset($data['cross_selling_assigned_products']) ? $data['cross_selling_assigned_products'] : null;
        $this->container['configurator_settings'] = isset($data['configurator_settings']) ? $data['configurator_settings'] : null;
        $this->container['visibilities'] = isset($data['visibilities']) ? $data['visibilities'] : null;
        $this->container['search_keywords'] = isset($data['search_keywords']) ? $data['search_keywords'] : null;
        $this->container['product_reviews'] = isset($data['product_reviews']) ? $data['product_reviews'] : null;
        $this->container['main_categories'] = isset($data['main_categories']) ? $data['main_categories'] : null;
        $this->container['seo_urls'] = isset($data['seo_urls']) ? $data['seo_urls'] : null;
        $this->container['order_line_items'] = isset($data['order_line_items']) ? $data['order_line_items'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['categories_ro'] = isset($data['categories_ro']) ? $data['categories_ro'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['custom_field_sets'] = isset($data['custom_field_sets']) ? $data['custom_field_sets'] : null;
        $this->container['feature_set'] = isset($data['feature_set']) ? $data['feature_set'] : null;
        $this->container['wishlists'] = isset($data['wishlists']) ? $data['wishlists'] : null;
        $this->container['canonical_product'] = isset($data['canonical_product']) ? $data['canonical_product'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsParent
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsParent $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsChildren
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsChildren $children children
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsDeliveryTime
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsDeliveryTime $delivery_time delivery_time
     *
     * @return $this
     */
    public function setDeliveryTime($delivery_time)
    {
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsTax
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsTax $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsManufacturer
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsManufacturer $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsUnit
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsUnit $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets cover
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsCover
     */
    public function getCover()
    {
        return $this->container['cover'];
    }

    /**
     * Sets cover
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsCover $cover cover
     *
     * @return $this
     */
    public function setCover($cover)
    {
        $this->container['cover'] = $cover;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsPrices
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsPrices $prices prices
     *
     * @return $this
     */
    public function setPrices($prices)
    {
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsMedia
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsMedia $media media
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets cross_sellings
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsCrossSellings
     */
    public function getCrossSellings()
    {
        return $this->container['cross_sellings'];
    }

    /**
     * Sets cross_sellings
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsCrossSellings $cross_sellings cross_sellings
     *
     * @return $this
     */
    public function setCrossSellings($cross_sellings)
    {
        $this->container['cross_sellings'] = $cross_sellings;

        return $this;
    }

    /**
     * Gets cross_selling_assigned_products
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsCrossSellingAssignedProducts
     */
    public function getCrossSellingAssignedProducts()
    {
        return $this->container['cross_selling_assigned_products'];
    }

    /**
     * Sets cross_selling_assigned_products
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsCrossSellingAssignedProducts $cross_selling_assigned_products cross_selling_assigned_products
     *
     * @return $this
     */
    public function setCrossSellingAssignedProducts($cross_selling_assigned_products)
    {
        $this->container['cross_selling_assigned_products'] = $cross_selling_assigned_products;

        return $this;
    }

    /**
     * Gets configurator_settings
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsConfiguratorSettings
     */
    public function getConfiguratorSettings()
    {
        return $this->container['configurator_settings'];
    }

    /**
     * Sets configurator_settings
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsConfiguratorSettings $configurator_settings configurator_settings
     *
     * @return $this
     */
    public function setConfiguratorSettings($configurator_settings)
    {
        $this->container['configurator_settings'] = $configurator_settings;

        return $this;
    }

    /**
     * Gets visibilities
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsVisibilities
     */
    public function getVisibilities()
    {
        return $this->container['visibilities'];
    }

    /**
     * Sets visibilities
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsVisibilities $visibilities visibilities
     *
     * @return $this
     */
    public function setVisibilities($visibilities)
    {
        $this->container['visibilities'] = $visibilities;

        return $this;
    }

    /**
     * Gets search_keywords
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsSearchKeywords
     */
    public function getSearchKeywords()
    {
        return $this->container['search_keywords'];
    }

    /**
     * Sets search_keywords
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsSearchKeywords $search_keywords search_keywords
     *
     * @return $this
     */
    public function setSearchKeywords($search_keywords)
    {
        $this->container['search_keywords'] = $search_keywords;

        return $this;
    }

    /**
     * Gets product_reviews
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsProductReviews
     */
    public function getProductReviews()
    {
        return $this->container['product_reviews'];
    }

    /**
     * Sets product_reviews
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsProductReviews $product_reviews product_reviews
     *
     * @return $this
     */
    public function setProductReviews($product_reviews)
    {
        $this->container['product_reviews'] = $product_reviews;

        return $this;
    }

    /**
     * Gets main_categories
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsMainCategories
     */
    public function getMainCategories()
    {
        return $this->container['main_categories'];
    }

    /**
     * Sets main_categories
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsMainCategories $main_categories main_categories
     *
     * @return $this
     */
    public function setMainCategories($main_categories)
    {
        $this->container['main_categories'] = $main_categories;

        return $this;
    }

    /**
     * Gets seo_urls
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsSeoUrls
     */
    public function getSeoUrls()
    {
        return $this->container['seo_urls'];
    }

    /**
     * Sets seo_urls
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsSeoUrls $seo_urls seo_urls
     *
     * @return $this
     */
    public function setSeoUrls($seo_urls)
    {
        $this->container['seo_urls'] = $seo_urls;

        return $this;
    }

    /**
     * Gets order_line_items
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsOrderLineItems
     */
    public function getOrderLineItems()
    {
        return $this->container['order_line_items'];
    }

    /**
     * Sets order_line_items
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsOrderLineItems $order_line_items order_line_items
     *
     * @return $this
     */
    public function setOrderLineItems($order_line_items)
    {
        $this->container['order_line_items'] = $order_line_items;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsOptions
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsOptions $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsProperties
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsProperties $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsCategories
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsCategories $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets categories_ro
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsCategoriesRo
     */
    public function getCategoriesRo()
    {
        return $this->container['categories_ro'];
    }

    /**
     * Sets categories_ro
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsCategoriesRo $categories_ro categories_ro
     *
     * @return $this
     */
    public function setCategoriesRo($categories_ro)
    {
        $this->container['categories_ro'] = $categories_ro;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsTags
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsTags $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_field_sets
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsCustomFieldSets
     */
    public function getCustomFieldSets()
    {
        return $this->container['custom_field_sets'];
    }

    /**
     * Sets custom_field_sets
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsCustomFieldSets $custom_field_sets custom_field_sets
     *
     * @return $this
     */
    public function setCustomFieldSets($custom_field_sets)
    {
        $this->container['custom_field_sets'] = $custom_field_sets;

        return $this;
    }

    /**
     * Gets feature_set
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsFeatureSet
     */
    public function getFeatureSet()
    {
        return $this->container['feature_set'];
    }

    /**
     * Sets feature_set
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsFeatureSet $feature_set feature_set
     *
     * @return $this
     */
    public function setFeatureSet($feature_set)
    {
        $this->container['feature_set'] = $feature_set;

        return $this;
    }

    /**
     * Gets wishlists
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsWishlists
     */
    public function getWishlists()
    {
        return $this->container['wishlists'];
    }

    /**
     * Sets wishlists
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsWishlists $wishlists wishlists
     *
     * @return $this
     */
    public function setWishlists($wishlists)
    {
        $this->container['wishlists'] = $wishlists;

        return $this;
    }

    /**
     * Gets canonical_product
     *
     * @return \Rundum\Shopware6\Model\ProductRelationshipsCanonicalProduct
     */
    public function getCanonicalProduct()
    {
        return $this->container['canonical_product'];
    }

    /**
     * Sets canonical_product
     *
     * @param \Rundum\Shopware6\Model\ProductRelationshipsCanonicalProduct $canonical_product canonical_product
     *
     * @return $this
     */
    public function setCanonicalProduct($canonical_product)
    {
        $this->container['canonical_product'] = $canonical_product;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
