<?php
/**
 * ProductExportRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Rundum\Shopware6\Model;

use \ArrayAccess;
use \Rundum\Shopware6\ObjectSerializer;

/**
 * ProductExportRelationships Class Doc Comment
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductExportRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'product_export_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_stream' => '\Rundum\Shopware6\Model\ProductExportRelationshipsProductStream',
'storefront_sales_channel' => '\Rundum\Shopware6\Model\ProductExportRelationshipsStorefrontSalesChannel',
'sales_channel' => '\Rundum\Shopware6\Model\ProductExportRelationshipsSalesChannel',
'sales_channel_domain' => '\Rundum\Shopware6\Model\ProductExportRelationshipsSalesChannelDomain',
'currency' => '\Rundum\Shopware6\Model\ProductExportRelationshipsCurrency'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_stream' => null,
'storefront_sales_channel' => null,
'sales_channel' => null,
'sales_channel_domain' => null,
'currency' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_stream' => 'productStream',
'storefront_sales_channel' => 'storefrontSalesChannel',
'sales_channel' => 'salesChannel',
'sales_channel_domain' => 'salesChannelDomain',
'currency' => 'currency'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_stream' => 'setProductStream',
'storefront_sales_channel' => 'setStorefrontSalesChannel',
'sales_channel' => 'setSalesChannel',
'sales_channel_domain' => 'setSalesChannelDomain',
'currency' => 'setCurrency'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_stream' => 'getProductStream',
'storefront_sales_channel' => 'getStorefrontSalesChannel',
'sales_channel' => 'getSalesChannel',
'sales_channel_domain' => 'getSalesChannelDomain',
'currency' => 'getCurrency'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_stream'] = isset($data['product_stream']) ? $data['product_stream'] : null;
        $this->container['storefront_sales_channel'] = isset($data['storefront_sales_channel']) ? $data['storefront_sales_channel'] : null;
        $this->container['sales_channel'] = isset($data['sales_channel']) ? $data['sales_channel'] : null;
        $this->container['sales_channel_domain'] = isset($data['sales_channel_domain']) ? $data['sales_channel_domain'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_stream
     *
     * @return \Rundum\Shopware6\Model\ProductExportRelationshipsProductStream
     */
    public function getProductStream()
    {
        return $this->container['product_stream'];
    }

    /**
     * Sets product_stream
     *
     * @param \Rundum\Shopware6\Model\ProductExportRelationshipsProductStream $product_stream product_stream
     *
     * @return $this
     */
    public function setProductStream($product_stream)
    {
        $this->container['product_stream'] = $product_stream;

        return $this;
    }

    /**
     * Gets storefront_sales_channel
     *
     * @return \Rundum\Shopware6\Model\ProductExportRelationshipsStorefrontSalesChannel
     */
    public function getStorefrontSalesChannel()
    {
        return $this->container['storefront_sales_channel'];
    }

    /**
     * Sets storefront_sales_channel
     *
     * @param \Rundum\Shopware6\Model\ProductExportRelationshipsStorefrontSalesChannel $storefront_sales_channel storefront_sales_channel
     *
     * @return $this
     */
    public function setStorefrontSalesChannel($storefront_sales_channel)
    {
        $this->container['storefront_sales_channel'] = $storefront_sales_channel;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \Rundum\Shopware6\Model\ProductExportRelationshipsSalesChannel
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \Rundum\Shopware6\Model\ProductExportRelationshipsSalesChannel $sales_channel sales_channel
     *
     * @return $this
     */
    public function setSalesChannel($sales_channel)
    {
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets sales_channel_domain
     *
     * @return \Rundum\Shopware6\Model\ProductExportRelationshipsSalesChannelDomain
     */
    public function getSalesChannelDomain()
    {
        return $this->container['sales_channel_domain'];
    }

    /**
     * Sets sales_channel_domain
     *
     * @param \Rundum\Shopware6\Model\ProductExportRelationshipsSalesChannelDomain $sales_channel_domain sales_channel_domain
     *
     * @return $this
     */
    public function setSalesChannelDomain($sales_channel_domain)
    {
        $this->container['sales_channel_domain'] = $sales_channel_domain;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Rundum\Shopware6\Model\ProductExportRelationshipsCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Rundum\Shopware6\Model\ProductExportRelationshipsCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
