<?php
/**
 * OrderFlat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Rundum\Shopware6\Model;

use \ArrayAccess;
use \Rundum\Shopware6\ObjectSerializer;

/**
 * OrderFlat Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderFlat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'order_flat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'version_id' => 'string',
'auto_increment' => 'int',
'order_number' => 'string',
'billing_address_id' => 'string',
'billing_address_version_id' => 'string',
'currency_id' => 'string',
'language_id' => 'string',
'sales_channel_id' => 'string',
'order_date_time' => '\DateTime',
'order_date' => 'string',
'price' => '\Rundum\Shopware6\Model\OrderPrice',
'amount_total' => 'float',
'amount_net' => 'float',
'position_price' => 'float',
'tax_status' => 'string',
'shipping_costs' => '\Rundum\Shopware6\Model\OrderShippingCosts',
'shipping_total' => 'float',
'currency_factor' => 'float',
'deep_link_code' => 'string',
'affiliate_code' => 'string',
'campaign_code' => 'string',
'customer_comment' => 'string',
'state_id' => 'string',
'rule_ids' => 'string[]',
'custom_fields' => 'object',
'created_by_id' => 'string',
'updated_by_id' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'state_machine_state' => '\Rundum\Shopware6\Model\StateMachineStateFlat',
'order_customer' => '\Rundum\Shopware6\Model\OrderCustomerFlat',
'currency' => '\Rundum\Shopware6\Model\CurrencyFlat',
'language' => '\Rundum\Shopware6\Model\LanguageFlat',
'sales_channel' => '\Rundum\Shopware6\Model\SalesChannelFlat',
'addresses' => '\Rundum\Shopware6\Model\OrderAddressFlat',
'billing_address' => '\Rundum\Shopware6\Model\OrderAddressFlat',
'deliveries' => '\Rundum\Shopware6\Model\OrderDeliveryFlat',
'line_items' => '\Rundum\Shopware6\Model\OrderLineItemFlat',
'transactions' => '\Rundum\Shopware6\Model\OrderTransactionFlat',
'documents' => '\Rundum\Shopware6\Model\DocumentFlat',
'tags' => '\Rundum\Shopware6\Model\TagFlat',
'created_by' => '\Rundum\Shopware6\Model\UserFlat',
'updated_by' => '\Rundum\Shopware6\Model\UserFlat'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'version_id' => 'uuid',
'auto_increment' => 'int64',
'order_number' => null,
'billing_address_id' => 'uuid',
'billing_address_version_id' => 'uuid',
'currency_id' => 'uuid',
'language_id' => 'uuid',
'sales_channel_id' => 'uuid',
'order_date_time' => 'date-time',
'order_date' => null,
'price' => null,
'amount_total' => 'float',
'amount_net' => 'float',
'position_price' => 'float',
'tax_status' => null,
'shipping_costs' => null,
'shipping_total' => 'float',
'currency_factor' => 'float',
'deep_link_code' => null,
'affiliate_code' => null,
'campaign_code' => null,
'customer_comment' => null,
'state_id' => 'uuid',
'rule_ids' => null,
'custom_fields' => null,
'created_by_id' => 'uuid',
'updated_by_id' => 'uuid',
'created_at' => 'date-time',
'updated_at' => 'date-time',
'state_machine_state' => null,
'order_customer' => null,
'currency' => null,
'language' => null,
'sales_channel' => null,
'addresses' => null,
'billing_address' => null,
'deliveries' => null,
'line_items' => null,
'transactions' => null,
'documents' => null,
'tags' => null,
'created_by' => null,
'updated_by' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'version_id' => 'versionId',
'auto_increment' => 'autoIncrement',
'order_number' => 'orderNumber',
'billing_address_id' => 'billingAddressId',
'billing_address_version_id' => 'billingAddressVersionId',
'currency_id' => 'currencyId',
'language_id' => 'languageId',
'sales_channel_id' => 'salesChannelId',
'order_date_time' => 'orderDateTime',
'order_date' => 'orderDate',
'price' => 'price',
'amount_total' => 'amountTotal',
'amount_net' => 'amountNet',
'position_price' => 'positionPrice',
'tax_status' => 'taxStatus',
'shipping_costs' => 'shippingCosts',
'shipping_total' => 'shippingTotal',
'currency_factor' => 'currencyFactor',
'deep_link_code' => 'deepLinkCode',
'affiliate_code' => 'affiliateCode',
'campaign_code' => 'campaignCode',
'customer_comment' => 'customerComment',
'state_id' => 'stateId',
'rule_ids' => 'ruleIds',
'custom_fields' => 'customFields',
'created_by_id' => 'createdById',
'updated_by_id' => 'updatedById',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'state_machine_state' => 'stateMachineState',
'order_customer' => 'orderCustomer',
'currency' => 'currency',
'language' => 'language',
'sales_channel' => 'salesChannel',
'addresses' => 'addresses',
'billing_address' => 'billingAddress',
'deliveries' => 'deliveries',
'line_items' => 'lineItems',
'transactions' => 'transactions',
'documents' => 'documents',
'tags' => 'tags',
'created_by' => 'createdBy',
'updated_by' => 'updatedBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'version_id' => 'setVersionId',
'auto_increment' => 'setAutoIncrement',
'order_number' => 'setOrderNumber',
'billing_address_id' => 'setBillingAddressId',
'billing_address_version_id' => 'setBillingAddressVersionId',
'currency_id' => 'setCurrencyId',
'language_id' => 'setLanguageId',
'sales_channel_id' => 'setSalesChannelId',
'order_date_time' => 'setOrderDateTime',
'order_date' => 'setOrderDate',
'price' => 'setPrice',
'amount_total' => 'setAmountTotal',
'amount_net' => 'setAmountNet',
'position_price' => 'setPositionPrice',
'tax_status' => 'setTaxStatus',
'shipping_costs' => 'setShippingCosts',
'shipping_total' => 'setShippingTotal',
'currency_factor' => 'setCurrencyFactor',
'deep_link_code' => 'setDeepLinkCode',
'affiliate_code' => 'setAffiliateCode',
'campaign_code' => 'setCampaignCode',
'customer_comment' => 'setCustomerComment',
'state_id' => 'setStateId',
'rule_ids' => 'setRuleIds',
'custom_fields' => 'setCustomFields',
'created_by_id' => 'setCreatedById',
'updated_by_id' => 'setUpdatedById',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'state_machine_state' => 'setStateMachineState',
'order_customer' => 'setOrderCustomer',
'currency' => 'setCurrency',
'language' => 'setLanguage',
'sales_channel' => 'setSalesChannel',
'addresses' => 'setAddresses',
'billing_address' => 'setBillingAddress',
'deliveries' => 'setDeliveries',
'line_items' => 'setLineItems',
'transactions' => 'setTransactions',
'documents' => 'setDocuments',
'tags' => 'setTags',
'created_by' => 'setCreatedBy',
'updated_by' => 'setUpdatedBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'version_id' => 'getVersionId',
'auto_increment' => 'getAutoIncrement',
'order_number' => 'getOrderNumber',
'billing_address_id' => 'getBillingAddressId',
'billing_address_version_id' => 'getBillingAddressVersionId',
'currency_id' => 'getCurrencyId',
'language_id' => 'getLanguageId',
'sales_channel_id' => 'getSalesChannelId',
'order_date_time' => 'getOrderDateTime',
'order_date' => 'getOrderDate',
'price' => 'getPrice',
'amount_total' => 'getAmountTotal',
'amount_net' => 'getAmountNet',
'position_price' => 'getPositionPrice',
'tax_status' => 'getTaxStatus',
'shipping_costs' => 'getShippingCosts',
'shipping_total' => 'getShippingTotal',
'currency_factor' => 'getCurrencyFactor',
'deep_link_code' => 'getDeepLinkCode',
'affiliate_code' => 'getAffiliateCode',
'campaign_code' => 'getCampaignCode',
'customer_comment' => 'getCustomerComment',
'state_id' => 'getStateId',
'rule_ids' => 'getRuleIds',
'custom_fields' => 'getCustomFields',
'created_by_id' => 'getCreatedById',
'updated_by_id' => 'getUpdatedById',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'state_machine_state' => 'getStateMachineState',
'order_customer' => 'getOrderCustomer',
'currency' => 'getCurrency',
'language' => 'getLanguage',
'sales_channel' => 'getSalesChannel',
'addresses' => 'getAddresses',
'billing_address' => 'getBillingAddress',
'deliveries' => 'getDeliveries',
'line_items' => 'getLineItems',
'transactions' => 'getTransactions',
'documents' => 'getDocuments',
'tags' => 'getTags',
'created_by' => 'getCreatedBy',
'updated_by' => 'getUpdatedBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['version_id'] = isset($data['version_id']) ? $data['version_id'] : null;
        $this->container['auto_increment'] = isset($data['auto_increment']) ? $data['auto_increment'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['billing_address_id'] = isset($data['billing_address_id']) ? $data['billing_address_id'] : null;
        $this->container['billing_address_version_id'] = isset($data['billing_address_version_id']) ? $data['billing_address_version_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['language_id'] = isset($data['language_id']) ? $data['language_id'] : null;
        $this->container['sales_channel_id'] = isset($data['sales_channel_id']) ? $data['sales_channel_id'] : null;
        $this->container['order_date_time'] = isset($data['order_date_time']) ? $data['order_date_time'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['amount_total'] = isset($data['amount_total']) ? $data['amount_total'] : null;
        $this->container['amount_net'] = isset($data['amount_net']) ? $data['amount_net'] : null;
        $this->container['position_price'] = isset($data['position_price']) ? $data['position_price'] : null;
        $this->container['tax_status'] = isset($data['tax_status']) ? $data['tax_status'] : null;
        $this->container['shipping_costs'] = isset($data['shipping_costs']) ? $data['shipping_costs'] : null;
        $this->container['shipping_total'] = isset($data['shipping_total']) ? $data['shipping_total'] : null;
        $this->container['currency_factor'] = isset($data['currency_factor']) ? $data['currency_factor'] : null;
        $this->container['deep_link_code'] = isset($data['deep_link_code']) ? $data['deep_link_code'] : null;
        $this->container['affiliate_code'] = isset($data['affiliate_code']) ? $data['affiliate_code'] : null;
        $this->container['campaign_code'] = isset($data['campaign_code']) ? $data['campaign_code'] : null;
        $this->container['customer_comment'] = isset($data['customer_comment']) ? $data['customer_comment'] : null;
        $this->container['state_id'] = isset($data['state_id']) ? $data['state_id'] : null;
        $this->container['rule_ids'] = isset($data['rule_ids']) ? $data['rule_ids'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['created_by_id'] = isset($data['created_by_id']) ? $data['created_by_id'] : null;
        $this->container['updated_by_id'] = isset($data['updated_by_id']) ? $data['updated_by_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['state_machine_state'] = isset($data['state_machine_state']) ? $data['state_machine_state'] : null;
        $this->container['order_customer'] = isset($data['order_customer']) ? $data['order_customer'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['sales_channel'] = isset($data['sales_channel']) ? $data['sales_channel'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['deliveries'] = isset($data['deliveries']) ? $data['deliveries'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['billing_address_id'] === null) {
            $invalidProperties[] = "'billing_address_id' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalidProperties[] = "'currency_id' can't be null";
        }
        if ($this->container['language_id'] === null) {
            $invalidProperties[] = "'language_id' can't be null";
        }
        if ($this->container['sales_channel_id'] === null) {
            $invalidProperties[] = "'sales_channel_id' can't be null";
        }
        if ($this->container['order_date_time'] === null) {
            $invalidProperties[] = "'order_date_time' can't be null";
        }
        if ($this->container['currency_factor'] === null) {
            $invalidProperties[] = "'currency_factor' can't be null";
        }
        if ($this->container['state_id'] === null) {
            $invalidProperties[] = "'state_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return string
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param string $version_id version_id
     *
     * @return $this
     */
    public function setVersionId($version_id)
    {
        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets auto_increment
     *
     * @return int
     */
    public function getAutoIncrement()
    {
        return $this->container['auto_increment'];
    }

    /**
     * Sets auto_increment
     *
     * @param int $auto_increment auto_increment
     *
     * @return $this
     */
    public function setAutoIncrement($auto_increment)
    {
        $this->container['auto_increment'] = $auto_increment;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets billing_address_id
     *
     * @return string
     */
    public function getBillingAddressId()
    {
        return $this->container['billing_address_id'];
    }

    /**
     * Sets billing_address_id
     *
     * @param string $billing_address_id billing_address_id
     *
     * @return $this
     */
    public function setBillingAddressId($billing_address_id)
    {
        $this->container['billing_address_id'] = $billing_address_id;

        return $this;
    }

    /**
     * Gets billing_address_version_id
     *
     * @return string
     */
    public function getBillingAddressVersionId()
    {
        return $this->container['billing_address_version_id'];
    }

    /**
     * Sets billing_address_version_id
     *
     * @param string $billing_address_version_id billing_address_version_id
     *
     * @return $this
     */
    public function setBillingAddressVersionId($billing_address_version_id)
    {
        $this->container['billing_address_version_id'] = $billing_address_version_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return string
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param string $language_id language_id
     *
     * @return $this
     */
    public function setLanguageId($language_id)
    {
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets sales_channel_id
     *
     * @return string
     */
    public function getSalesChannelId()
    {
        return $this->container['sales_channel_id'];
    }

    /**
     * Sets sales_channel_id
     *
     * @param string $sales_channel_id sales_channel_id
     *
     * @return $this
     */
    public function setSalesChannelId($sales_channel_id)
    {
        $this->container['sales_channel_id'] = $sales_channel_id;

        return $this;
    }

    /**
     * Gets order_date_time
     *
     * @return \DateTime
     */
    public function getOrderDateTime()
    {
        return $this->container['order_date_time'];
    }

    /**
     * Sets order_date_time
     *
     * @param \DateTime $order_date_time order_date_time
     *
     * @return $this
     */
    public function setOrderDateTime($order_date_time)
    {
        $this->container['order_date_time'] = $order_date_time;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Rundum\Shopware6\Model\OrderPrice
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Rundum\Shopware6\Model\OrderPrice $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets amount_total
     *
     * @return float
     */
    public function getAmountTotal()
    {
        return $this->container['amount_total'];
    }

    /**
     * Sets amount_total
     *
     * @param float $amount_total amount_total
     *
     * @return $this
     */
    public function setAmountTotal($amount_total)
    {
        $this->container['amount_total'] = $amount_total;

        return $this;
    }

    /**
     * Gets amount_net
     *
     * @return float
     */
    public function getAmountNet()
    {
        return $this->container['amount_net'];
    }

    /**
     * Sets amount_net
     *
     * @param float $amount_net amount_net
     *
     * @return $this
     */
    public function setAmountNet($amount_net)
    {
        $this->container['amount_net'] = $amount_net;

        return $this;
    }

    /**
     * Gets position_price
     *
     * @return float
     */
    public function getPositionPrice()
    {
        return $this->container['position_price'];
    }

    /**
     * Sets position_price
     *
     * @param float $position_price position_price
     *
     * @return $this
     */
    public function setPositionPrice($position_price)
    {
        $this->container['position_price'] = $position_price;

        return $this;
    }

    /**
     * Gets tax_status
     *
     * @return string
     */
    public function getTaxStatus()
    {
        return $this->container['tax_status'];
    }

    /**
     * Sets tax_status
     *
     * @param string $tax_status tax_status
     *
     * @return $this
     */
    public function setTaxStatus($tax_status)
    {
        $this->container['tax_status'] = $tax_status;

        return $this;
    }

    /**
     * Gets shipping_costs
     *
     * @return \Rundum\Shopware6\Model\OrderShippingCosts
     */
    public function getShippingCosts()
    {
        return $this->container['shipping_costs'];
    }

    /**
     * Sets shipping_costs
     *
     * @param \Rundum\Shopware6\Model\OrderShippingCosts $shipping_costs shipping_costs
     *
     * @return $this
     */
    public function setShippingCosts($shipping_costs)
    {
        $this->container['shipping_costs'] = $shipping_costs;

        return $this;
    }

    /**
     * Gets shipping_total
     *
     * @return float
     */
    public function getShippingTotal()
    {
        return $this->container['shipping_total'];
    }

    /**
     * Sets shipping_total
     *
     * @param float $shipping_total shipping_total
     *
     * @return $this
     */
    public function setShippingTotal($shipping_total)
    {
        $this->container['shipping_total'] = $shipping_total;

        return $this;
    }

    /**
     * Gets currency_factor
     *
     * @return float
     */
    public function getCurrencyFactor()
    {
        return $this->container['currency_factor'];
    }

    /**
     * Sets currency_factor
     *
     * @param float $currency_factor currency_factor
     *
     * @return $this
     */
    public function setCurrencyFactor($currency_factor)
    {
        $this->container['currency_factor'] = $currency_factor;

        return $this;
    }

    /**
     * Gets deep_link_code
     *
     * @return string
     */
    public function getDeepLinkCode()
    {
        return $this->container['deep_link_code'];
    }

    /**
     * Sets deep_link_code
     *
     * @param string $deep_link_code deep_link_code
     *
     * @return $this
     */
    public function setDeepLinkCode($deep_link_code)
    {
        $this->container['deep_link_code'] = $deep_link_code;

        return $this;
    }

    /**
     * Gets affiliate_code
     *
     * @return string
     */
    public function getAffiliateCode()
    {
        return $this->container['affiliate_code'];
    }

    /**
     * Sets affiliate_code
     *
     * @param string $affiliate_code affiliate_code
     *
     * @return $this
     */
    public function setAffiliateCode($affiliate_code)
    {
        $this->container['affiliate_code'] = $affiliate_code;

        return $this;
    }

    /**
     * Gets campaign_code
     *
     * @return string
     */
    public function getCampaignCode()
    {
        return $this->container['campaign_code'];
    }

    /**
     * Sets campaign_code
     *
     * @param string $campaign_code campaign_code
     *
     * @return $this
     */
    public function setCampaignCode($campaign_code)
    {
        $this->container['campaign_code'] = $campaign_code;

        return $this;
    }

    /**
     * Gets customer_comment
     *
     * @return string
     */
    public function getCustomerComment()
    {
        return $this->container['customer_comment'];
    }

    /**
     * Sets customer_comment
     *
     * @param string $customer_comment customer_comment
     *
     * @return $this
     */
    public function setCustomerComment($customer_comment)
    {
        $this->container['customer_comment'] = $customer_comment;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string $state_id state_id
     *
     * @return $this
     */
    public function setStateId($state_id)
    {
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets rule_ids
     *
     * @return string[]
     */
    public function getRuleIds()
    {
        return $this->container['rule_ids'];
    }

    /**
     * Sets rule_ids
     *
     * @param string[] $rule_ids rule_ids
     *
     * @return $this
     */
    public function setRuleIds($rule_ids)
    {
        $this->container['rule_ids'] = $rule_ids;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return string
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param string $created_by_id created_by_id
     *
     * @return $this
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets updated_by_id
     *
     * @return string
     */
    public function getUpdatedById()
    {
        return $this->container['updated_by_id'];
    }

    /**
     * Sets updated_by_id
     *
     * @param string $updated_by_id updated_by_id
     *
     * @return $this
     */
    public function setUpdatedById($updated_by_id)
    {
        $this->container['updated_by_id'] = $updated_by_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets state_machine_state
     *
     * @return \Rundum\Shopware6\Model\StateMachineStateFlat
     */
    public function getStateMachineState()
    {
        return $this->container['state_machine_state'];
    }

    /**
     * Sets state_machine_state
     *
     * @param \Rundum\Shopware6\Model\StateMachineStateFlat $state_machine_state state_machine_state
     *
     * @return $this
     */
    public function setStateMachineState($state_machine_state)
    {
        $this->container['state_machine_state'] = $state_machine_state;

        return $this;
    }

    /**
     * Gets order_customer
     *
     * @return \Rundum\Shopware6\Model\OrderCustomerFlat
     */
    public function getOrderCustomer()
    {
        return $this->container['order_customer'];
    }

    /**
     * Sets order_customer
     *
     * @param \Rundum\Shopware6\Model\OrderCustomerFlat $order_customer order_customer
     *
     * @return $this
     */
    public function setOrderCustomer($order_customer)
    {
        $this->container['order_customer'] = $order_customer;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Rundum\Shopware6\Model\CurrencyFlat
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Rundum\Shopware6\Model\CurrencyFlat $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Rundum\Shopware6\Model\LanguageFlat
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Rundum\Shopware6\Model\LanguageFlat $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \Rundum\Shopware6\Model\SalesChannelFlat
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \Rundum\Shopware6\Model\SalesChannelFlat $sales_channel sales_channel
     *
     * @return $this
     */
    public function setSalesChannel($sales_channel)
    {
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Rundum\Shopware6\Model\OrderAddressFlat
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Rundum\Shopware6\Model\OrderAddressFlat $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Rundum\Shopware6\Model\OrderAddressFlat
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Rundum\Shopware6\Model\OrderAddressFlat $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets deliveries
     *
     * @return \Rundum\Shopware6\Model\OrderDeliveryFlat
     */
    public function getDeliveries()
    {
        return $this->container['deliveries'];
    }

    /**
     * Sets deliveries
     *
     * @param \Rundum\Shopware6\Model\OrderDeliveryFlat $deliveries deliveries
     *
     * @return $this
     */
    public function setDeliveries($deliveries)
    {
        $this->container['deliveries'] = $deliveries;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Rundum\Shopware6\Model\OrderLineItemFlat
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Rundum\Shopware6\Model\OrderLineItemFlat $line_items line_items
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Rundum\Shopware6\Model\OrderTransactionFlat
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Rundum\Shopware6\Model\OrderTransactionFlat $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Rundum\Shopware6\Model\DocumentFlat
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Rundum\Shopware6\Model\DocumentFlat $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Rundum\Shopware6\Model\TagFlat
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Rundum\Shopware6\Model\TagFlat $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Rundum\Shopware6\Model\UserFlat
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Rundum\Shopware6\Model\UserFlat $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Rundum\Shopware6\Model\UserFlat
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Rundum\Shopware6\Model\UserFlat $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
