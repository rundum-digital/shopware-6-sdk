<?php
/**
 * OrderDeliveryRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Rundum\Shopware6\Model;

use \ArrayAccess;
use \Rundum\Shopware6\ObjectSerializer;

/**
 * OrderDeliveryRelationships Class Doc Comment
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderDeliveryRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'order_delivery_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state_machine_state' => '\Rundum\Shopware6\Model\OrderDeliveryRelationshipsStateMachineState',
'order' => '\Rundum\Shopware6\Model\OrderDeliveryRelationshipsOrder',
'shipping_order_address' => '\Rundum\Shopware6\Model\OrderDeliveryRelationshipsShippingOrderAddress',
'shipping_method' => '\Rundum\Shopware6\Model\OrderDeliveryRelationshipsShippingMethod',
'positions' => '\Rundum\Shopware6\Model\OrderDeliveryRelationshipsPositions'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'state_machine_state' => null,
'order' => null,
'shipping_order_address' => null,
'shipping_method' => null,
'positions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state_machine_state' => 'stateMachineState',
'order' => 'order',
'shipping_order_address' => 'shippingOrderAddress',
'shipping_method' => 'shippingMethod',
'positions' => 'positions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state_machine_state' => 'setStateMachineState',
'order' => 'setOrder',
'shipping_order_address' => 'setShippingOrderAddress',
'shipping_method' => 'setShippingMethod',
'positions' => 'setPositions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state_machine_state' => 'getStateMachineState',
'order' => 'getOrder',
'shipping_order_address' => 'getShippingOrderAddress',
'shipping_method' => 'getShippingMethod',
'positions' => 'getPositions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state_machine_state'] = isset($data['state_machine_state']) ? $data['state_machine_state'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['shipping_order_address'] = isset($data['shipping_order_address']) ? $data['shipping_order_address'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['positions'] = isset($data['positions']) ? $data['positions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state_machine_state
     *
     * @return \Rundum\Shopware6\Model\OrderDeliveryRelationshipsStateMachineState
     */
    public function getStateMachineState()
    {
        return $this->container['state_machine_state'];
    }

    /**
     * Sets state_machine_state
     *
     * @param \Rundum\Shopware6\Model\OrderDeliveryRelationshipsStateMachineState $state_machine_state state_machine_state
     *
     * @return $this
     */
    public function setStateMachineState($state_machine_state)
    {
        $this->container['state_machine_state'] = $state_machine_state;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Rundum\Shopware6\Model\OrderDeliveryRelationshipsOrder
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Rundum\Shopware6\Model\OrderDeliveryRelationshipsOrder $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets shipping_order_address
     *
     * @return \Rundum\Shopware6\Model\OrderDeliveryRelationshipsShippingOrderAddress
     */
    public function getShippingOrderAddress()
    {
        return $this->container['shipping_order_address'];
    }

    /**
     * Sets shipping_order_address
     *
     * @param \Rundum\Shopware6\Model\OrderDeliveryRelationshipsShippingOrderAddress $shipping_order_address shipping_order_address
     *
     * @return $this
     */
    public function setShippingOrderAddress($shipping_order_address)
    {
        $this->container['shipping_order_address'] = $shipping_order_address;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return \Rundum\Shopware6\Model\OrderDeliveryRelationshipsShippingMethod
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param \Rundum\Shopware6\Model\OrderDeliveryRelationshipsShippingMethod $shipping_method shipping_method
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \Rundum\Shopware6\Model\OrderDeliveryRelationshipsPositions
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \Rundum\Shopware6\Model\OrderDeliveryRelationshipsPositions $positions positions
     *
     * @return $this
     */
    public function setPositions($positions)
    {
        $this->container['positions'] = $positions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
