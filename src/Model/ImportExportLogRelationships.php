<?php
/**
 * ImportExportLogRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Rundum\Shopware6\Model;

use \ArrayAccess;
use \Rundum\Shopware6\ObjectSerializer;

/**
 * ImportExportLogRelationships Class Doc Comment
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportExportLogRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'import_export_log_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user' => '\Rundum\Shopware6\Model\ImportExportLogRelationshipsUser',
'profile' => '\Rundum\Shopware6\Model\ImportExportLogRelationshipsProfile',
'file' => '\Rundum\Shopware6\Model\ImportExportLogRelationshipsFile',
'invalid_records_log' => '\Rundum\Shopware6\Model\ImportExportLogRelationshipsInvalidRecordsLog',
'failed_import_log' => '\Rundum\Shopware6\Model\ImportExportLogRelationshipsFailedImportLog'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user' => null,
'profile' => null,
'file' => null,
'invalid_records_log' => null,
'failed_import_log' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
'profile' => 'profile',
'file' => 'file',
'invalid_records_log' => 'invalidRecordsLog',
'failed_import_log' => 'failedImportLog'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
'profile' => 'setProfile',
'file' => 'setFile',
'invalid_records_log' => 'setInvalidRecordsLog',
'failed_import_log' => 'setFailedImportLog'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
'profile' => 'getProfile',
'file' => 'getFile',
'invalid_records_log' => 'getInvalidRecordsLog',
'failed_import_log' => 'getFailedImportLog'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['invalid_records_log'] = isset($data['invalid_records_log']) ? $data['invalid_records_log'] : null;
        $this->container['failed_import_log'] = isset($data['failed_import_log']) ? $data['failed_import_log'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return \Rundum\Shopware6\Model\ImportExportLogRelationshipsUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Rundum\Shopware6\Model\ImportExportLogRelationshipsUser $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Rundum\Shopware6\Model\ImportExportLogRelationshipsProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Rundum\Shopware6\Model\ImportExportLogRelationshipsProfile $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \Rundum\Shopware6\Model\ImportExportLogRelationshipsFile
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \Rundum\Shopware6\Model\ImportExportLogRelationshipsFile $file file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets invalid_records_log
     *
     * @return \Rundum\Shopware6\Model\ImportExportLogRelationshipsInvalidRecordsLog
     */
    public function getInvalidRecordsLog()
    {
        return $this->container['invalid_records_log'];
    }

    /**
     * Sets invalid_records_log
     *
     * @param \Rundum\Shopware6\Model\ImportExportLogRelationshipsInvalidRecordsLog $invalid_records_log invalid_records_log
     *
     * @return $this
     */
    public function setInvalidRecordsLog($invalid_records_log)
    {
        $this->container['invalid_records_log'] = $invalid_records_log;

        return $this;
    }

    /**
     * Gets failed_import_log
     *
     * @return \Rundum\Shopware6\Model\ImportExportLogRelationshipsFailedImportLog
     */
    public function getFailedImportLog()
    {
        return $this->container['failed_import_log'];
    }

    /**
     * Sets failed_import_log
     *
     * @param \Rundum\Shopware6\Model\ImportExportLogRelationshipsFailedImportLog $failed_import_log failed_import_log
     *
     * @return $this
     */
    public function setFailedImportLog($failed_import_log)
    {
        $this->container['failed_import_log'] = $failed_import_log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
