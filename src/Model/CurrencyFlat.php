<?php
/**
 * CurrencyFlat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Rundum\Shopware6\Model;

use \ArrayAccess;
use \Rundum\Shopware6\ObjectSerializer;

/**
 * CurrencyFlat Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  Rundum\Shopware6
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CurrencyFlat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'currency_flat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'factor' => 'float',
'symbol' => 'string',
'iso_code' => 'string',
'short_name' => 'string',
'name' => 'string',
'decimal_precision' => 'int',
'position' => 'int',
'is_system_default' => 'bool',
'custom_fields' => 'object',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'translated' => 'object',
'sales_channel_default_assignments' => '\Rundum\Shopware6\Model\SalesChannelFlat',
'orders' => '\Rundum\Shopware6\Model\OrderFlat',
'sales_channels' => '\Rundum\Shopware6\Model\SalesChannelFlat',
'sales_channel_domains' => '\Rundum\Shopware6\Model\SalesChannelDomainFlat',
'promotion_discount_prices' => '\Rundum\Shopware6\Model\PromotionDiscountPricesFlat',
'product_exports' => '\Rundum\Shopware6\Model\ProductExportFlat'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'factor' => 'float',
'symbol' => null,
'iso_code' => null,
'short_name' => null,
'name' => null,
'decimal_precision' => 'int64',
'position' => 'int64',
'is_system_default' => null,
'custom_fields' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'translated' => null,
'sales_channel_default_assignments' => null,
'orders' => null,
'sales_channels' => null,
'sales_channel_domains' => null,
'promotion_discount_prices' => null,
'product_exports' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'factor' => 'factor',
'symbol' => 'symbol',
'iso_code' => 'isoCode',
'short_name' => 'shortName',
'name' => 'name',
'decimal_precision' => 'decimalPrecision',
'position' => 'position',
'is_system_default' => 'isSystemDefault',
'custom_fields' => 'customFields',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'translated' => 'translated',
'sales_channel_default_assignments' => 'salesChannelDefaultAssignments',
'orders' => 'orders',
'sales_channels' => 'salesChannels',
'sales_channel_domains' => 'salesChannelDomains',
'promotion_discount_prices' => 'promotionDiscountPrices',
'product_exports' => 'productExports'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'factor' => 'setFactor',
'symbol' => 'setSymbol',
'iso_code' => 'setIsoCode',
'short_name' => 'setShortName',
'name' => 'setName',
'decimal_precision' => 'setDecimalPrecision',
'position' => 'setPosition',
'is_system_default' => 'setIsSystemDefault',
'custom_fields' => 'setCustomFields',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'translated' => 'setTranslated',
'sales_channel_default_assignments' => 'setSalesChannelDefaultAssignments',
'orders' => 'setOrders',
'sales_channels' => 'setSalesChannels',
'sales_channel_domains' => 'setSalesChannelDomains',
'promotion_discount_prices' => 'setPromotionDiscountPrices',
'product_exports' => 'setProductExports'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'factor' => 'getFactor',
'symbol' => 'getSymbol',
'iso_code' => 'getIsoCode',
'short_name' => 'getShortName',
'name' => 'getName',
'decimal_precision' => 'getDecimalPrecision',
'position' => 'getPosition',
'is_system_default' => 'getIsSystemDefault',
'custom_fields' => 'getCustomFields',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'translated' => 'getTranslated',
'sales_channel_default_assignments' => 'getSalesChannelDefaultAssignments',
'orders' => 'getOrders',
'sales_channels' => 'getSalesChannels',
'sales_channel_domains' => 'getSalesChannelDomains',
'promotion_discount_prices' => 'getPromotionDiscountPrices',
'product_exports' => 'getProductExports'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['factor'] = isset($data['factor']) ? $data['factor'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['iso_code'] = isset($data['iso_code']) ? $data['iso_code'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['decimal_precision'] = isset($data['decimal_precision']) ? $data['decimal_precision'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['is_system_default'] = isset($data['is_system_default']) ? $data['is_system_default'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['translated'] = isset($data['translated']) ? $data['translated'] : null;
        $this->container['sales_channel_default_assignments'] = isset($data['sales_channel_default_assignments']) ? $data['sales_channel_default_assignments'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['sales_channels'] = isset($data['sales_channels']) ? $data['sales_channels'] : null;
        $this->container['sales_channel_domains'] = isset($data['sales_channel_domains']) ? $data['sales_channel_domains'] : null;
        $this->container['promotion_discount_prices'] = isset($data['promotion_discount_prices']) ? $data['promotion_discount_prices'] : null;
        $this->container['product_exports'] = isset($data['product_exports']) ? $data['product_exports'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['factor'] === null) {
            $invalidProperties[] = "'factor' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ($this->container['iso_code'] === null) {
            $invalidProperties[] = "'iso_code' can't be null";
        }
        if ($this->container['short_name'] === null) {
            $invalidProperties[] = "'short_name' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['decimal_precision'] === null) {
            $invalidProperties[] = "'decimal_precision' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets factor
     *
     * @return float
     */
    public function getFactor()
    {
        return $this->container['factor'];
    }

    /**
     * Sets factor
     *
     * @param float $factor factor
     *
     * @return $this
     */
    public function setFactor($factor)
    {
        $this->container['factor'] = $factor;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets iso_code
     *
     * @return string
     */
    public function getIsoCode()
    {
        return $this->container['iso_code'];
    }

    /**
     * Sets iso_code
     *
     * @param string $iso_code iso_code
     *
     * @return $this
     */
    public function setIsoCode($iso_code)
    {
        $this->container['iso_code'] = $iso_code;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name short_name
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets decimal_precision
     *
     * @return int
     */
    public function getDecimalPrecision()
    {
        return $this->container['decimal_precision'];
    }

    /**
     * Sets decimal_precision
     *
     * @param int $decimal_precision decimal_precision
     *
     * @return $this
     */
    public function setDecimalPrecision($decimal_precision)
    {
        $this->container['decimal_precision'] = $decimal_precision;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets is_system_default
     *
     * @return bool
     */
    public function getIsSystemDefault()
    {
        return $this->container['is_system_default'];
    }

    /**
     * Sets is_system_default
     *
     * @param bool $is_system_default is_system_default
     *
     * @return $this
     */
    public function setIsSystemDefault($is_system_default)
    {
        $this->container['is_system_default'] = $is_system_default;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets translated
     *
     * @return object
     */
    public function getTranslated()
    {
        return $this->container['translated'];
    }

    /**
     * Sets translated
     *
     * @param object $translated translated
     *
     * @return $this
     */
    public function setTranslated($translated)
    {
        $this->container['translated'] = $translated;

        return $this;
    }

    /**
     * Gets sales_channel_default_assignments
     *
     * @return \Rundum\Shopware6\Model\SalesChannelFlat
     */
    public function getSalesChannelDefaultAssignments()
    {
        return $this->container['sales_channel_default_assignments'];
    }

    /**
     * Sets sales_channel_default_assignments
     *
     * @param \Rundum\Shopware6\Model\SalesChannelFlat $sales_channel_default_assignments sales_channel_default_assignments
     *
     * @return $this
     */
    public function setSalesChannelDefaultAssignments($sales_channel_default_assignments)
    {
        $this->container['sales_channel_default_assignments'] = $sales_channel_default_assignments;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \Rundum\Shopware6\Model\OrderFlat
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \Rundum\Shopware6\Model\OrderFlat $orders orders
     *
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets sales_channels
     *
     * @return \Rundum\Shopware6\Model\SalesChannelFlat
     */
    public function getSalesChannels()
    {
        return $this->container['sales_channels'];
    }

    /**
     * Sets sales_channels
     *
     * @param \Rundum\Shopware6\Model\SalesChannelFlat $sales_channels sales_channels
     *
     * @return $this
     */
    public function setSalesChannels($sales_channels)
    {
        $this->container['sales_channels'] = $sales_channels;

        return $this;
    }

    /**
     * Gets sales_channel_domains
     *
     * @return \Rundum\Shopware6\Model\SalesChannelDomainFlat
     */
    public function getSalesChannelDomains()
    {
        return $this->container['sales_channel_domains'];
    }

    /**
     * Sets sales_channel_domains
     *
     * @param \Rundum\Shopware6\Model\SalesChannelDomainFlat $sales_channel_domains sales_channel_domains
     *
     * @return $this
     */
    public function setSalesChannelDomains($sales_channel_domains)
    {
        $this->container['sales_channel_domains'] = $sales_channel_domains;

        return $this;
    }

    /**
     * Gets promotion_discount_prices
     *
     * @return \Rundum\Shopware6\Model\PromotionDiscountPricesFlat
     */
    public function getPromotionDiscountPrices()
    {
        return $this->container['promotion_discount_prices'];
    }

    /**
     * Sets promotion_discount_prices
     *
     * @param \Rundum\Shopware6\Model\PromotionDiscountPricesFlat $promotion_discount_prices promotion_discount_prices
     *
     * @return $this
     */
    public function setPromotionDiscountPrices($promotion_discount_prices)
    {
        $this->container['promotion_discount_prices'] = $promotion_discount_prices;

        return $this;
    }

    /**
     * Gets product_exports
     *
     * @return \Rundum\Shopware6\Model\ProductExportFlat
     */
    public function getProductExports()
    {
        return $this->container['product_exports'];
    }

    /**
     * Sets product_exports
     *
     * @param \Rundum\Shopware6\Model\ProductExportFlat $product_exports product_exports
     *
     * @return $this
     */
    public function setProductExports($product_exports)
    {
        $this->container['product_exports'] = $product_exports;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
